// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eweqq7h9oPPXmhNg71Z2fg
// Component: G9asBr2dMf

import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import * as plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import * as projectcss from "./plasmic_revnitro.module.css"; // plasmic-import: eweqq7h9oPPXmhNg71Z2fg/projectcss
import * as sty from "./PlasmicBlogCard.module.css"; // plasmic-import: G9asBr2dMf/css

import image63PtHnw5VI from "./images/image6.png"; // plasmic-import: 3PtHNW5vI/picture

createPlasmicElementProxy;

export type PlasmicBlogCard__VariantMembers = {};
export type PlasmicBlogCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlogCard__VariantsArgs;
export const PlasmicBlogCard__VariantProps = new Array<VariantPropType>();

export type PlasmicBlogCard__ArgsType = {};
type ArgPropType = keyof PlasmicBlogCard__ArgsType;
export const PlasmicBlogCard__ArgProps = new Array<ArgPropType>();

export type PlasmicBlogCard__OverridesType = {
  root?: p.Flex<"div">;
  cards1?: p.Flex<"div">;
  content?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  badgesNeutral?: p.Flex<"div">;
  title?: p.Flex<"div">;
};

export interface DefaultBlogCardProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicBlogCard__RenderFunc(props: {
  variants: PlasmicBlogCard__VariantsArgs;
  args: PlasmicBlogCard__ArgsType;
  overrides: PlasmicBlogCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"cards1"}
        data-plasmic-override={overrides.cards1}
        className={classNames(projectcss.all, sty.cards1)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          hasGap={true}
          className={classNames(projectcss.all, sty.content)}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"217px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: image63PtHnw5VI,
              fullWidth: 930,
              fullHeight: 620,
              aspectRatio: undefined
            }}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"badgesNeutral"}
            data-plasmic-override={overrides.badgesNeutral}
            hasGap={true}
            className={classNames(projectcss.all, sty.badgesNeutral)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kavn8
              )}
            >
              {"BIKE"}
            </div>
          </p.Stack>
          <div
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.title
            )}
          >
            {"Rider Development Tips"}
          </div>
          {false ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rhRbz
              )}
            >
              {
                "This is a description of the text that is in the article as a pre screener for what you need to know."
              }
            </div>
          ) : null}
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "cards1", "content", "img", "badgesNeutral", "title"],
  cards1: ["cards1", "content", "img", "badgesNeutral", "title"],
  content: ["content", "img", "badgesNeutral", "title"],
  img: ["img"],
  badgesNeutral: ["badgesNeutral"],
  title: ["title"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  cards1: "div";
  content: "div";
  img: typeof p.PlasmicImg;
  badgesNeutral: "div";
  title: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlogCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlogCard__VariantsArgs;
    args?: PlasmicBlogCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlogCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBlogCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBlogCard__ArgProps,
          internalVariantPropNames: PlasmicBlogCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBlogCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlogCard";
  } else {
    func.displayName = `PlasmicBlogCard.${nodeName}`;
  }
  return func;
}

export const PlasmicBlogCard = Object.assign(
  // Top-level PlasmicBlogCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cards1: makeNodeComponent("cards1"),
    content: makeNodeComponent("content"),
    img: makeNodeComponent("img"),
    badgesNeutral: makeNodeComponent("badgesNeutral"),
    title: makeNodeComponent("title"),

    // Metadata about props expected for PlasmicBlogCard
    internalVariantProps: PlasmicBlogCard__VariantProps,
    internalArgProps: PlasmicBlogCard__ArgProps
  }
);

export default PlasmicBlogCard;
/* prettier-ignore-end */
